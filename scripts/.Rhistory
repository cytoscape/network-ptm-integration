print(as.integer(510.00))
View(p.position)
test<-getNodePosition(node.names=c("510", "513", "516"))
View(test)
View(test)
##To-Do: Get position for all relevant protein nodes, store as data frame
##alt 1
node.positions <- getNodePosition(node.names=matching.nodes.prot$SUID)
View(node.positions)
node.widths <- getNodeWidth(node.names=matching.nodes.prot$SUID)
node.heights <- getNodeHeight(node.names=matching.nodes.prot$SUID)
node.positions.full <- merge(node.positions, node.widths, node.heights)
test_df <- bind_rows(node.positions, node.widths, node.heights)
View(test_df)
View(node.positions)
View(matching.nodes.prot)
View(cptac.phospho.ccrcc)
node.positions <- cbind(suid = rownames(node.positions), node.positions)
rownames(node.positions) <- 1:nrow(node.positions)
View(node.positions)
node.widths  <- cbind(suid = rownames(node.widths ), node.widths )
rownames(node.widths ) <- 1:nrow(node.widths )
node.heights <- getNodeHeight(node.names=matching.nodes.prot$SUID)
node.heights <- cbind(suid = rownames(node.heights), node.heights)
rownames(node.heights) <- 1:nrow(node.heights)
test_df <- bind_rows(node.positions, node.widths, node.heights)
#test_df <- bind_rows(node.positions, node.widths, node.heights)
test_df <- merge (node.positions, node.widths, node.heights)
View(node.positions)
View(node.heights)
node.heights <- getNodeHeight(node.names=matching.nodes.prot$SUID)
node.heights <- cbind(suid = rownames(node.heights), node.heights)
rownames(node.heights) <- 1:nrow(node.heights)
node.widths <- getNodeWidth(node.names=matching.nodes.prot$SUID)
node.widths <- as.dataframe(getNodeWidth(node.names=matching.nodes.prot$SUID))
print(node.widths)
node.widths <- as.data.frame(node.widths)
View(node.widths)
node.widths <- as.data.frame(getNodeWidth(node.names=matching.nodes.prot$SUID))
node.widths  <- cbind(suid = rownames(node.widths ), node.widths )
rownames(node.widths ) <- 1:nrow(node.widths )
node.heights <- as.data.frame(getNodeHeight(node.names=matching.nodes.prot$SUID))
node.heights <- cbind(suid = rownames(node.heights), node.heights)
rownames(node.heights) <- 1:nrow(node.heights)
#test_df <- bind_rows(node.positions, node.widths, node.heights)
test_df <- merge (node.positions, node.widths, node.heights)
View(node.widths)
test_df <- bind_rows(node.positions, node.widths, node.heights)
View(test_df)
View(node.widths)
test_df <- merge(node.positions, node.widths, node.heights, by.x="suid")
test_df <- merge(node.positions, node.widths, node.heights, by.y="suid")
View(node.positions)
node.widths <- as.data.frame(getNodeWidth(node.names=matching.nodes.prot$SUID))
View(node.widths)
node.widths  <- cbind(suid = rownames(node.widths ), node.widths )
View(node.widths)
rownames(node.widths ) <- 1:nrow(node.widths )
node.widths <- as.data.frame(getNodeWidth(node.names=matching.nodes.prot$SUID))
node.widths  <- cbind(suid = rownames(node.widths ), node.widths )
View(node.widths)
View(node.widths)
rownames(node.widths ) <- 1:nrow(node.widths )
View(node.widths)
node.widths <- node.widths %>%
mutate(node width = getNodeWidth(node.names=matching.nodes.prot$SUID))
node.widths <- node.widths %>%
rename(node_width = getNodeWidth(node.names=matching.nodes.prot$SUID))
node.widths <- node.widths %>%
rename(node_width = "getNodeWidth(node.names=matching.nodes.prot$SUID)")
colnames(node.widths)[1:2] <- c("suid", "node width")
node.widths <- as.data.frame(getNodeWidth(node.names=matching.nodes.prot$SUID), col.names = "node width")
node.widths <- as.data.frame(getNodeWidth(node.names=matching.nodes.prot$SUID), col.names = c("node width"))
View(node.widths)
node.widths <- getNodeWidth(node.names=matching.nodes.prot$SUID)
node.widths <- as.data.frame(node.widths, col.names = c("node width"))
View(node.widths)
node.width <- getNodeWidth(node.names=matching.nodes.prot$SUID)
node.width <- as.data.frame(node.width)
node.width  <- cbind(suid = rownames(node.width), node.width)
rownames(node.width) <- 1:nrow(node.width)
View(node.widths)
node.width <- getNodeWidth(node.names=matching.nodes.prot$SUID)
node.width <- as.data.frame(node.width)
node.width  <- cbind(suid = rownames(node.width), node.width)
View(node.widths)
rownames(node.width) <- 1:nrow(node.width)
View(node.widths)
node.width  <- cbind(suid = rownames(node.widths ), node.widths )
rownames(node.widths ) <- 1:nrow(node.widths )
View(node.widths)
node.width <- getNodeWidth(node.names=matching.nodes.prot$SUID)
print(node.width)
node.width <- as.data.frame(node.width)
View(node.width)
node.width  <- cbind(suid = rownames(node.widths ), node.widths )
node.width <- getNodeWidth(node.names=matching.nodes.prot$SUID)
node.width <- as.data.frame(node.width)
node.width <- as.data.frame(node.width)
node.width  <- cbind(suid = rownames(node.width), node.width)
rownames(node.width) <- 1:nrow(node.width)
View(node.width)
node.height <- getNodeHeight(node.names=matching.nodes.prot$SUID)
node.height <- as.data.frame(node.height)
node.height <- cbind(suid = rownames(node.height), node.height)
rownames(node.height) <- 1:nrow(node.height)
View(node.height)
test_df <- merge(node.positions, node.width, node.height, by="suid")
test_df <- bind_rows(node.positions, node.widths, node.heights)
View(test_df)
#test_df <- bind_rows(node.positions, node.widths, node.heights)
test_df <- merge(node.width, node.height, by="suid")
View(test_df)
test_df <- merge(test.df, node.positions, by="suid")
test_df <- merge(test_df, node.positions, by="suid")
View(test_df)
#test_df <- bind_rows(node.positions, node.widths, node.heights)
node.layout <- merge(node.width, node.height, by="suid")
node.layout <- merge(node.layout, node.positions, by="suid")
View(node.layout)
node.layout.test <- node.layout %>%
mutate(xpos=c(x_location+(node.width/2)+16, x_location+(node.width/2)+16, x_location-+(node.width/2)-16, x_location-(node.width/2)-16))
node.layout.test <- node.layout %>%
mutate(xpos=c(x_location+(node.width/2)+16, x_location+(node.width/2)+16, x_location-(node.width/2)-16, x_location-(node.width/2)-16))
node.layout.test <- node.layout %>%
mutate(xpos=c(3,3, 4, 4))
node.layout.test <- node.layout %>%
mutate(xpos=list(c(3,3, 4, 4)))
node.layout.test <- node.layout %>%
mutate(xpos=list(c(3,3, 4, 4)))
View(node.layout.test)
node.layout.test <- node.layout %>%
mutate(xpos = list(c(x_location+(node.width/2)+16, x_location+(node.width/2)+16, x_location-(node.width/2)-16, x_location-(node.width/2)-16)))
View(node.layout.test)
node.layout.test <- node.layout %>%
mutate(xpos = list(c(x_location+16)))
View(node.layout.test)
node.layout.test <- node.layout
View(node.layout.test)
node.layout.test <- node.layout %>%
mutate(xpos = list(c(x_location+16)))
View(node.layout.test)
node.layout.test <- node.layout %>%
mutate(xpos = x_location+16)
View(node.layout.test)
node.layout.test <- node.layout %>%
mutate(xpos = list(c(x_location+16, x_location-16)))
View(node.layout.test)
library(purrr)
node.layout.test <- node.layout
View(node.layout.test)
node.layout.test <- node.layout %>%
mutate(list_column = pmap(list(x_location, node.width),
function(x_val, width_val) {
list(
x_val + (width_val / 2) + 16,
x_val - (width_val / 2) + 16,
x_val - (width_val / 2) - 16
)
}))
View(node.layout.test)
View(node.layout.test[[6]][[1]])
node.layout <- node.layout %>%
mutate(x.ptm = pmap(list(x_location, node.width),
function(x_val, width_val) {
list(x_val + (width_val / 2) + 16,x_val + (width_val / 2) + 16,x_val - (width_val / 2) - 16,x_val - (width_val / 2) - 16)}))
View(node.layout)
node.layout <- node.layout %>%
mutate(y.ptm = pmap(list(y_location, node.height),
function(y_val, height_val) {
list(y_val + (height_val / 2),y_val - (height_val / 2),y_val - (height_val / 2),y_val + (height_val / 2))}))
View(node.layout)
## Need this for matching with kinase substrate data
matching.nodes.phospho <- cptac.phospho.ccrcc.sig %>%
filter(symbol %in% node.table.prot$name) %>%
mutate(comp_id=paste0(symbol, "_", site)) %>%
select(symbol, site, comp_id)
View(node.layout)
p <- "501"
#addCyEdges(c(p, ptm)) #need the SUID for this
x <- node.layout$x.ptm[node.layout$suid == p]
#addCyEdges(c(p, ptm)) #need the SUID for this
x <- node.layout$x.ptm[node.layout$suid == p][[pos]]
##Set node position bypass for ptm nodes. Use 4 sites on each node.
pos <- 1
#addCyEdges(c(p, ptm)) #need the SUID for this
x <- node.layout$x.ptm[node.layout$suid == p][[pos]]
test <- node.layout$x.ptm[node.layout$suid == p][[1]]
test <- (node.layout$x.ptm[node.layout$suid == p])[[1]]
test <- node.layout$x.ptm[node.layout$suid == p][1]
View(test)
node.layout.test2 <- node.layout %>%
mutate(nested_df = map2(suid, x + width, ~ data.frame(suid = .x, new_value = .y)))
node.layout.test2 <- node.layout %>%
mutate(nested_df = map2(suid, x_location + node.width, ~ data.frame(suid = .x, new_value = .y)))
View(node.layout.test2)
View(node.layout.test2[[8]][[1]])
View(node.layout.test2)
print(test[[1]])
print(test[1])
print(test[[[1]]])
View(test)
print(test[[1]][[1]])
print(test[[1]][[2]])
print(test[[1]][[3]])
for (p in matching.nodes.prot$SUID){
prot <- matching.nodes.prot$name[matching.nodes.prot$SUID == p]
# #Get node position for protein node
# p.position <- getNodePosition(node.names = p)
# p.width <- getNodeWidth(node.names = p)
# p.height <- getNodeHeight(node.names = p)
#Calculate possible phospho site positions, limit to 4 sites for now.
# phospho.positions <- data.frame()
# pos.x <- p.position$x_location
# pos.y <- p.position$y_location
# #phospho.positions <- data.frame(position=1:4, x=c(pos.x+40, pos.x+40, pos.x-40, pos.x-40), y=c(pos.y+10, pos.y-10, pos.y-10, pos.y+10))
# phospho.positions <- data.frame(position=1:4, x=c(pos.x+(p.width/2)+16, pos.x+(p.width/2)+16, pos.x-+(p.width/2)-16, pos.x-(p.width/2)-16), y=c(pos.y+(p.height/2), pos.y-(p.height/2), pos.y-(p.height/2), pos.y+(p.height/2)))
#find relevant subset of cptac phospho data, these are the ptm nodes to add
phospho.nodes <- site.table %>%
filter(symbol == prot) %>%
select(comp_id)
phospho.nodes <- head(phospho.nodes, 4) ##take first 4
##Add a node for each ptm, for the particular protein. Collect the SUID for the added ptm, and use it for updating position below.
suids <- addCyNodes(node.names = phospho.nodes$comp_id, skip.duplicate.names = FALSE)
ptms <- data.frame()
for (l in suids){
ptms <- rbind(ptms, l)
}
##Set node position bypass for ptm nodes. Use 4 sites on each node.
pos <- 1
#for (ptm in phospho.nodes$comp_id){
for (ptm in ptms$SUID){
#addCyEdges(c(p, ptm)) #need the SUID for this
x <- node.layout$x.ptm[node.layout$suid == p][[1]][[pos]]
y <- node.layout$y.ptm[node.layout$suid == p][[1]][[pos]]
# x <- subset(phospho.positions, position == pos)$x
# y <- subset(phospho.positions, position == pos)$y
setNodePositionBypass(ptm, x, y)
pos <- pos+1
}
ptms.all <- rbind(ptms.all, ptms)
}
site.table <- matching.nodes.phospho
ptms.all <- data.frame()
for (p in matching.nodes.prot$SUID){
prot <- matching.nodes.prot$name[matching.nodes.prot$SUID == p]
# #Get node position for protein node
# p.position <- getNodePosition(node.names = p)
# p.width <- getNodeWidth(node.names = p)
# p.height <- getNodeHeight(node.names = p)
#Calculate possible phospho site positions, limit to 4 sites for now.
# phospho.positions <- data.frame()
# pos.x <- p.position$x_location
# pos.y <- p.position$y_location
# #phospho.positions <- data.frame(position=1:4, x=c(pos.x+40, pos.x+40, pos.x-40, pos.x-40), y=c(pos.y+10, pos.y-10, pos.y-10, pos.y+10))
# phospho.positions <- data.frame(position=1:4, x=c(pos.x+(p.width/2)+16, pos.x+(p.width/2)+16, pos.x-+(p.width/2)-16, pos.x-(p.width/2)-16), y=c(pos.y+(p.height/2), pos.y-(p.height/2), pos.y-(p.height/2), pos.y+(p.height/2)))
#find relevant subset of cptac phospho data, these are the ptm nodes to add
phospho.nodes <- site.table %>%
filter(symbol == prot) %>%
select(comp_id)
phospho.nodes <- head(phospho.nodes, 4) ##take first 4
##Add a node for each ptm, for the particular protein. Collect the SUID for the added ptm, and use it for updating position below.
suids <- addCyNodes(node.names = phospho.nodes$comp_id, skip.duplicate.names = FALSE)
ptms <- data.frame()
for (l in suids){
ptms <- rbind(ptms, l)
}
##Set node position bypass for ptm nodes. Use 4 sites on each node.
pos <- 1
#for (ptm in phospho.nodes$comp_id){
for (ptm in ptms$SUID){
#addCyEdges(c(p, ptm)) #need the SUID for this
x <- node.layout$x.ptm[node.layout$suid == p][[1]][[pos]]
y <- node.layout$y.ptm[node.layout$suid == p][[1]][[pos]]
# x <- subset(phospho.positions, position == pos)$x
# y <- subset(phospho.positions, position == pos)$y
setNodePositionBypass(ptm, x, y)
pos <- pos+1
}
ptms.all <- rbind(ptms.all, ptms)
}
getwd()
setwd("~/Dropbox (Gladstone)/Work/github/network-ptm-integration/scripts)
###############
## Read in data
## Phosphoprotein data. Note that this includes NA values.
## Add unique id comp_id for each protein/site combination
cptac.phospho <- read.csv("../datasets/CPTAC_phospho_tn.txt", stringsAsFactors = F, sep = "\t")
setwd("~/Dropbox (Gladstone)/Work/github/network-ptm-integration/scripts)
###############
## Read in data
## Phosphoprotein data. Note that this includes NA values.
## Add unique id comp_id for each protein/site combination
cptac.phospho <- read.csv("../datasets/CPTAC_phospho_tn.txt", stringsAsFactors = F, sep = "\t")
setwd("~/Dropbox (Gladstone)/Work/github/network-ptm-integration/scripts)
###############
## Read in data
## Phosphoprotein data. Note that this includes NA values.
## Add unique id comp_id for each protein/site combination
cptac.phospho <- read.csv("../datasets/CPTAC_phospho_tn.txt", stringsAsFactors = F, sep = "\t")
##Change working dir for local dev. Adjust path based on setup.
setwd("~/Dropbox (Gladstone)/Work/github/network-ptm-integration/scripts")
View(node.layout)
View(cptac.phospho)
## Phosphoprotein data. Note that this includes NA values.
## Add unique id comp_id for each protein/site combination
cptac.phospho <- read.csv("../datasets/CPTAC_phospho_tn.txt", stringsAsFactors = F, sep = "\t")
cptac.phospho <- cptac.phospho %>%
mutate(comp_id=paste0(symbol, "_", site))
## Extracting phospho data for one cancer type - CCRC example
## CCRC phosphoprotein abundance dataset without NAs
cptac.phospho.ccrcc <- cptac.phospho %>%
select(symbol, site, protein, comp_id, CCRCC.val, CCRCC.pval) %>%
filter(!is.na(CCRCC.pval) & !is.na(CCRCC.pval))
cptac.phospho.ccrcc.sig <- cptac.phospho.ccrcc %>%
filter(CCRCC.pval > 0 & CCRCC.pval < 0.05)
## Protein data. Note that this includes NA values.
## The p-values and "val" statistics are from Wilcoxon rank sum test. Positive values means abundance is higher in tumor.
cptac.protein <- read.csv("../datasets/CPTAC_protein_tn.txt", stringsAsFactors = F, sep = "\t")
## Extracting protein data for one cancer type - CCRC example
## CCRC protein dataset without NAs
cptac.protein.ccrcc <- cptac.protein %>%
select(ensembl, symbol, CCRCC.val, CCRCC.pval) %>%
filter(!is.na(CCRCC.pval) & !is.na(CCRCC.pval))
## Phosphosite kinase-substrate data
psp.data <- read.csv("../annotations/Kinase_Substrate_Dataset.txt", stringsAsFactors = F, sep = "\t")
psp.data.human<- psp.data %>%
filter(KIN_ORGANISM == "human" & IN_VIVO_RXN == "X")  %>%
mutate(comp_id=paste0(SUBSTRATE, "_", SUB_MOD_RSD)) %>%
select(GENE, comp_id, SUBSTRATE, SUB_MOD_RSD) #human only, in vivo evidence only
## add loop for multiple pathways here
## Open and process WP, get relevant phospho data nodes and cross-check against kinase-substrate data
RCy3::commandsRun('wikipathways import-as-pathway id=WP4806')
## Remove existing ptm states from nodes. These are encoded as nodes with the label P.
selectNodes(nodes = "p", by.col = "name", preserve.current.selection = FALSE)
deleteSelectedNodes()
mode <- "all"
View(cptac.phospho.ccrcc)
View(cptac.protein)
BiocManager::install("BridgeDbR")
library('biomaRt')
BiocManager::install("biomaRt")
View(matching.nodes.phospho)
library('biomaRt')
BiocManager::install("biomaRt")
install.packages("biomaRt")
library('biomaRt')
library(biomaRt)
library(fastmap)
library(htmltools)
library(biomaRt)
browseVignettes("biomaRt")
View(cptac.phospho)
## Get all relevant protein/gene product data nodes in pathway
## Map to Ensembl
mapped.cols <- mapTableColumn('Ensembl','Human','Ensembl','HGNC')
View(mapped.cols)
View(node.table)
View(mapped.cols)
text <- merge(mapped.cols, node.table, by="Ensembl")
View(text)
View(mapped.cols)
mapped.cols <- mapped.cols %>%
filter(!is.na(Ensembl) & !is.na(HGNC))
text <- merge(mapped.cols, node.table, by="Ensembl")
View(text)
node.table <- RCy3::getTableColumns(table = "node")
node.table.prot <- subset(node.table, Type == 'Protein' | Type == 'GeneProduct') %>%
select(SUID, name, XrefId, Ensembl) ##get node table entries for relevant nodes. not sure we need this
View(node.table.prot)
test2 <- merge(mapped.cols, node.table.prot, by="Ensembl")
View(node.table.prot)
View(test2)
View(node.table.prot)
test2 <- intersect(mapped.cols, node.table.prot)
test2 <- merge(mapped.cols, node.table.prot, by="Ensembl", all=FALSE)
View(test2)
View(cptac.protein)
View(node.table.prot)
View(node.layout.test2)
View(test2)
View(mapped.cols)
mapped.cols <- mapped.cols %>%
filter(!is.na(Ensembl) & !is.na(HGNC)) %>%
distinct()
View(mapped.cols)
node.table.protein2 <- merge(mapped.cols, node.table.prot, by="Ensembl", all=FALSE)
View(node.table.protein2)
node.table.protein <- merge(mapped.cols, node.table.prot, by="Ensembl", all=FALSE)
node.table.prot <- merge(mapped.cols, node.table.prot, by="Ensembl", all=FALSE)
## All matching nodes: Intersection between pathway protein/gene nodes and significant phospho data
## These are the nodes we are going to add phospho nodes to.
matching.nodes.prot <- node.table.prot %>%
filter(name %in% cptac.phospho.ccrcc.sig$symbol) %>%
select(SUID, name)
View(matching.nodes.prot)
View(matching.nodes.prot)
View(matching.nodes.prot)
View(node.table.prot)
View(node.table.protein)
## PROGENy EGFR pathway correlated data.
## cohort.val:pearman correlation; coefficient and cohort.pval:p-value
cptac.progeny.egfr <- read.csv("../datasets/CPTAC_PROGENy__EGFR.txt", stringsAsFactors = F, sep = "\t")
cptac.progeny.egfr <- cptac.progeny.egfr %>%
mutate(comp_id=paste0(symbol, "_", site))
## Positively regulated PROGEny EGFR pathway and CCRC
cptac.egfr.ccrcc.pos <- cptac.progeny.egfr %>%
filter(CCRCC.pval > 0 & CCRCC.pval < 0.05) ##Automatically gets rid of NAs
## Negatively regulated PROGEny EGFR pathway and CCRC
cptac.egfr.ccrcc.neg <- cptac.progeny.egfr %>%
filter(CCRCC.pval > -0.05 & CCRCC.pval < 0)
View(cptac.egfr.ccrcc.neg)
## Positively regulated PROGEny EGFR pathway and CCRC
cptac.egfr.ccrcc.pos <- cptac.progeny.egfr %>%
filter(CCRCC.pval > 0 & CCRCC.pval < 0.05) %>%
select(ensembl, symbol, protein, site, CCRCC.val, CCRCC.pval) ##Automatically gets rid of NAs
## Positively regulated PROGEny EGFR pathway and CCRC
cptac.egfr.ccrcc.pos <- cptac.progeny.egfr %>%
filter(CCRCC.pval > 0 & CCRCC.pval < 0.05) %>%
select(symbol, protein, site, CCRCC.val, CCRCC.pval) ##Automatically gets rid of NAs
## Negatively regulated PROGEny EGFR pathway and CCRC
cptac.egfr.ccrcc.neg <- cptac.progeny.egfr %>%
filter(CCRCC.pval > -0.05 & CCRCC.pval < 0) %>%
select(symbol, protein, site, CCRCC.val, CCRCC.pval)
## Negatively regulated PROGEny EGFR pathway and CCRC
cptac.egfr.ccrcc.neg <- cptac.progeny.egfr %>%
filter(CCRCC.pval > -0.05 & CCRCC.pval < 0) %>%
mutate(comp_id=paste0(symbol, "_", site)) %>%
select(symbol, protein, site, CCRCC.val, CCRCC.pval)
## Positively regulated PROGEny EGFR pathway and CCRC
cptac.egfr.ccrcc.pos <- cptac.progeny.egfr %>%
filter(CCRCC.pval > 0 & CCRCC.pval < 0.05) %>%
mutate(comp_id=paste0(symbol, "_", site)) %>%
select(symbol, protein, site, CCRCC.val, CCRCC.pval) ##Automatically gets rid of NAs
## PROGENy EGFR pathway correlated data.
## cohort.val:pearman correlation; coefficient and cohort.pval:p-value
cptac.progeny.egfr <- read.csv("../datasets/CPTAC_PROGENy__EGFR.txt", stringsAsFactors = F, sep = "\t")
cptac.progeny.egfr <- cptac.progeny.egfr %>%
mutate(comp_id=paste0(symbol, "_", site))
## Positively regulated PROGEny EGFR pathway and CCRC
cptac.egfr.ccrcc.pos <- cptac.progeny.egfr %>%
filter(CCRCC.pval > 0 & CCRCC.pval < 0.05) %>%
mutate(comp_id=paste0(symbol, "_", site)) %>%
select(symbol, protein, site, CCRCC.val, CCRCC.pval) ##Automatically gets rid of NAs
View(cptac.progeny.egfr)
## Positively regulated PROGEny EGFR pathway and CCRC
cptac.egfr.ccrcc.pos <- cptac.progeny.egfr %>%
filter(CCRCC.pval > 0 & CCRCC.pval < 0.05) %>%
select(symbol, protein, site, CCRCC.val, comp_id, CCRCC.pval) ##Automatically gets rid of NAs
View(cptac.egfr.ccrcc.pos)
## Positively regulated PROGEny EGFR pathway and CCRC
cptac.egfr.ccrcc.pos <- cptac.progeny.egfr %>%
filter(CCRCC.pval > 0 & CCRCC.pval < 0.05) %>%
select(symbol, protein, site, comp_id, CCRCC.val, CCRCC.pval) ##Automatically gets rid of NAs
## Negatively regulated PROGEny EGFR pathway and CCRC
cptac.egfr.ccrcc.neg <- cptac.progeny.egfr %>%
filter(CCRCC.pval > -0.05 & CCRCC.pval < 0) %>%
select(symbol, protein, site, comp_id, CCRCC.val, CCRCC.pval)
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways", update = FALSE)
}
library(rWikiPathways)
load.libs <- c(
"DOSE",
"GO.db",
"GSEABase",
"org.Hs.eg.db",
"clusterProfiler",
"dplyr",
"tidyr",
"ggplot2",
"stringr",
"RColorBrewer",
"rWikiPathways",
"RCy3")
options(install.packages.check.source = "no")
options(install.packages.compile.from.source = "never")
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(load.libs, update = TRUE, character.only = TRUE)
status <- sapply(load.libs,require,character.only = TRUE)
if(all(status)){
print("SUCCESS: You have successfully installed and loaded all required libraries.")
} else{
cat("ERROR: One or more libraries failed to install correctly. Check the following list for FALSE cases and try again...\n\n")
status
}
load.libs <- c(
"DOSE",
"GO.db",
"GSEABase",
"org.Hs.eg.db",
"clusterProfiler",
"dplyr",
"tidyr",
"ggplot2",
"stringr",
"RColorBrewer",
"rWikiPathways",
"RCy3")
options(install.packages.check.source = "no")
options(install.packages.compile.from.source = "never")
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(load.libs, update = TRUE, character.only = TRUE)
status <- sapply(load.libs,require,character.only = TRUE)
if(all(status)){
print("SUCCESS: You have successfully installed and loaded all required libraries.")
} else{
cat("ERROR: One or more libraries failed to install correctly. Check the following list for FALSE cases and try again...\n\n")
status
}
